{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Auth } from \"aws-amplify\";\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { Day, Exercises, User, Week, ExercisesStorage } from \"../../models\";\nimport _ from \"lodash\";\nimport moment, { months } from \"moment\";\nimport AgendaItems from \"./Agenda\";\nimport { useNavigation, useIsFocused } from \"@react-navigation/native\";\nimport CustomButton from \"../../componets/CustomButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar currUser;\n\nvar CalanderScreen = function CalanderScreen() {\n  var navigation = useNavigation();\n  var isFocused = useIsFocused();\n  useEffect(function () {}, [isFocused]);\n\n  var loadData = function loadData() {\n    var username;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(Auth.Credentials.Auth.user.username);\n            username = Auth.Credentials.Auth.user.username;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(DataStore.query(User, function (u) {\n              return u.username(\"eq\", username);\n            }));\n\n          case 4:\n            currUser = _context.sent;\n            console.log(\"loaded\");\n            setLoaded(true);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  loadData();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refresh = _useState4[0],\n      setrefresh = _useState4[1];\n\n  var signOut = function signOut() {\n    Auth.signOut();\n  };\n\n  function getWeekBegin() {\n    var now = new Date();\n    var next = new Date(now.getFullYear(), now.getMonth(), now.getDate() + (7 - now.getDay()));\n    return next;\n  }\n\n  var convertArrayToObject = function convertArrayToObject(array, key) {\n    var initialValue = {};\n    return array.reduce(function (obj, item) {\n      return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, item[key], [{\n        name: item.name\n      }]));\n    }, initialValue);\n  };\n\n  var GoToModScreen = function GoToModScreen() {\n    setLoaded(false);\n    navigation.navigate('ModifyScreen');\n  };\n\n  var getData = function getData() {\n    var data = [];\n    console.log(currUser);\n    currUser[0].TrainingDayList.forEach(function (x) {\n      x.exercisesDays.forEach(function (i) {\n        var exersizeString = \"Start Time: \";\n        exersizeString = exersizeString + i.startTime + \"\\n\";\n        i.exercises.forEach(function (p, idx) {\n          var num = (idx + 1).toString();\n          exersizeString = exersizeString + num + \". \" + p.name + \" for \" + p.numberOfReps + \" reps and for \" + p.sets + \" sets \\n\";\n        });\n        exersizeString = exersizeString + \"\\n\\n\";\n        data.push(new AgendaItems(i.Date, exersizeString));\n      });\n    });\n    var dataToReturn = convertArrayToObject(data, 'date');\n    currUser = null;\n    return dataToReturn;\n  };\n\n  var _renderItem = function renderItem(item, firstItemInDay) {\n    return _jsx(TouchableOpacity, {\n      children: _jsx(_Fragment, {\n        children: _jsx(Text, {\n          style: {\n            color: '#555'\n          },\n          children: item.name\n        })\n      })\n    });\n  };\n\n  if (loaded == false) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {})\n    });\n  }\n\n  var m = moment().format('YYYY-MM-DD');\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(Agenda, {\n      items: getData(),\n      selected: m,\n      renderItem: function renderItem(item, firstItemInDay) {\n        return _renderItem(item, firstItemInDay);\n      },\n      renderEmptyDate: function renderEmptyDate() {\n        return _jsx(Text, {\n          children: \"You do not have any workouts planed this day! Enjoy your day off.\"\n        });\n      },\n      renderEmptyData: function renderEmptyData() {\n        return _jsx(Text, {\n          children: \"You do not have any workouts planed this day! Enjoy your day off.\"\n        });\n      }\n    }), _jsx(CustomButton, {\n      onPress: GoToModScreen,\n      text: \"Change Schedule\"\n    }), _jsx(CustomButton, {\n      onPress: signOut,\n      text: \"Sign Out\",\n      bgColor: \"#E3242B\"\n    })]\n  });\n};\n\nexport default CalanderScreen;","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/src/screens/CalanderScreen/CalanderScreen.js"],"names":["React","useState","useEffect","Auth","Calendar","CalendarList","Agenda","DataStore","Day","Exercises","User","Week","ExercisesStorage","_","moment","months","AgendaItems","useNavigation","useIsFocused","CustomButton","currUser","CalanderScreen","navigation","isFocused","loadData","console","log","Credentials","user","username","query","u","setLoaded","loaded","refresh","setrefresh","signOut","getWeekBegin","now","Date","next","getFullYear","getMonth","getDate","getDay","convertArrayToObject","array","key","initialValue","reduce","obj","item","name","GoToModScreen","navigate","getData","data","TrainingDayList","forEach","x","exercisesDays","i","exersizeString","startTime","exercises","p","idx","num","toString","numberOfReps","sets","push","dataToReturn","renderItem","firstItemInDay","color","flex","justifyContent","alignItems","m","format"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;;;;;AAEA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,MAAhC,QAA6C,wBAA7C;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,gBAArC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,QAA/B;AACA,OAAOC,WAAP;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA2C,0BAA3C;AACA,OAAOC,YAAP;;;;AAEA,IAAIC,QAAJ;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,UAAU,GAAGL,aAAa,EAAhC;AACA,MAAMM,SAAS,GAAGL,YAAY,EAA9B;AAEAhB,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,EAEL,CAACqB,SAAD,CAFK,CAAT;;AAIA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,YAAAA,OAAO,CAACC,GAAR,CAAYvB,IAAI,CAACwB,WAAL,CAAiBxB,IAAjB,CAAsByB,IAAtB,CAA2BC,QAAvC;AACMA,YAAAA,QAHO,GAGI1B,IAAI,CAACwB,WAAL,CAAiBxB,IAAjB,CAAsByB,IAAtB,CAA2BC,QAH/B;AAAA;AAAA,6CAIItB,SAAS,CAACuB,KAAV,CAAgBpB,IAAhB,EAAuB,UAAAqB,CAAC;AAAA,qBAAIA,CAAC,CAACF,QAAF,CAAW,IAAX,EAAiBA,QAAjB,CAAJ;AAAA,aAAxB,CAJJ;;AAAA;AAIbT,YAAAA,QAJa;AAKbK,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAM,YAAAA,SAAS,CAAC,IAAD,CAAT;;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAUAR,EAAAA,QAAQ;;AAER,kBAA4BvB,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOgC,MAAP;AAAA,MAAeD,SAAf;;AACA,mBAA8B/B,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOiC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAK;AACjBjC,IAAAA,IAAI,CAACiC,OAAL;AACH,GAFD;;AAIA,WAASC,YAAT,GAAwB;AACpB,QAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACA,QAAIC,IAAI,GAAG,IAAID,IAAJ,CAASD,GAAG,CAACG,WAAJ,EAAT,EAA4BH,GAAG,CAACI,QAAJ,EAA5B,EAA4CJ,GAAG,CAACK,OAAJ,MAAe,IAAIL,GAAG,CAACM,MAAJ,EAAnB,CAA5C,CAAX;AACA,WAAOJ,IAAP;AACF;;AAEF,MAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAQC,GAAR,EAAgB;AACzC,QAAMC,YAAY,GAAG,EAArB;AACA,WAAOF,KAAK,CAACG,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN,EAAe;AACjC,6CACKD,GADL,2BAEGC,IAAI,CAACJ,GAAD,CAFP,EAEe,CAAC;AAACK,QAAAA,IAAI,EAAED,IAAI,CAACC;AAAZ,OAAD,CAFf;AAID,KALM,EAKJJ,YALI,CAAP;AAMD,GARH;;AASA,MAAMK,aAAa,GAAI,SAAjBA,aAAiB,GAAK;AACxBrB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAV,IAAAA,UAAU,CAACgC,QAAX,CAAoB,cAApB;AACH,GAHD;;AAKA,MAAMC,OAAO,GAAI,SAAXA,OAAW,GAAK;AAClB,QAAIC,IAAI,GAAG,EAAX;AACA/B,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAA,IAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYqC,eAAZ,CAA4BC,OAA5B,CAAoC,UAAAC,CAAC,EAAI;AAErCA,MAAAA,CAAC,CAACC,aAAF,CAAgBF,OAAhB,CAAwB,UAAAG,CAAC,EAAI;AACzB,YAAIC,cAAc,GAAG,cAArB;AAEAA,QAAAA,cAAc,GAACA,cAAc,GAAGD,CAAC,CAACE,SAAnB,GAA6B,IAA5C;AACAF,QAAAA,CAAC,CAACG,SAAF,CAAYN,OAAZ,CAAoB,UAASO,CAAT,EAAYC,GAAZ,EAAiB;AACjC,cAAIC,GAAG,GAAG,CAACD,GAAG,GAAC,CAAL,EAAQE,QAAR,EAAV;AACAN,UAAAA,cAAc,GAAIA,cAAc,GAAEK,GAAhB,GAAsB,IAAtB,GAA6BF,CAAC,CAACb,IAA/B,GAAsC,OAAtC,GAA+Ca,CAAC,CAACI,YAAjD,GAAgE,gBAAhE,GAAkFJ,CAAC,CAACK,IAApF,GAA2F,UAA7G;AACH,SAHD;AAIAR,QAAAA,cAAc,GAAGA,cAAc,GAAE,MAAjC;AACAN,QAAAA,IAAI,CAACe,IAAL,CAAU,IAAIvD,WAAJ,CAAgB6C,CAAC,CAACtB,IAAlB,EAAuBuB,cAAvB,CAAV;AACH,OAVD;AAYH,KAdD;AAgBA,QAAIU,YAAY,GAAG3B,oBAAoB,CAACW,IAAD,EAAM,MAAN,CAAvC;AAcDpC,IAAAA,QAAQ,GAAE,IAAV;AACC,WAAOoD,YAAP;AAEH,GApCD;;AAsCA,MAAMC,WAAU,GAAG,SAAbA,UAAa,CAACtB,IAAD,EAAOuB,cAAP,EAA0B;AACzC,WACE,KAAC,gBAAD;AAAA,gBACE;AAAA,kBACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA,oBAA+BxB,IAAI,CAACC;AAApC;AADJ;AADF,MADF;AAOD,GARH;;AAUE,MAAInB,MAAM,IAAI,KAAd,EAAqB;AACjB,WAAmB,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAC2C,QAAAA,IAAI,EAAC,CAAN;AAASC,QAAAA,cAAc,EAAC,QAAxB;AAAiCC,QAAAA,UAAU,EAAC;AAA5C,OAAb;AAAA,gBACnB,KAAC,iBAAD;AADmB,MAAnB;AAGH;;AACH,MAAIC,CAAC,GAAGjE,MAAM,GAAGkE,MAAT,CAAgB,YAAhB,CAAR;AACA,SAEI,MAAC,IAAD;AAAO,IAAA,KAAK,EAAE;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAd;AAAA,eACI,KAAC,MAAD;AAEI,MAAA,KAAK,EAAErB,OAAO,EAFlB;AAII,MAAA,QAAQ,EAAEwB,CAJd;AAKI,MAAA,UAAU,EAAE,oBAAC5B,IAAD,EAAOuB,cAAP,EAA0B;AAClC,eAAQD,WAAU,CAACtB,IAAD,EAAMuB,cAAN,CAAlB;AACD,OAPP;AASM,MAAA,eAAe,EAAE,2BAAM;AACrB,eAAO,KAAC,IAAD;AAAA;AAAA,UAAP;AACD,OAXP;AAYM,MAAA,eAAe,EAAE,2BAAM;AACrB,eAAO,KAAC,IAAD;AAAA;AAAA,UAAP;AACD;AAdP,MADJ,EAqBI,KAAC,YAAD;AAAc,MAAA,OAAO,EAAErB,aAAvB;AAAsC,MAAA,IAAI,EAAC;AAA3C,MArBJ,EAsBI,KAAC,YAAD;AAAc,MAAA,OAAO,EAAEjB,OAAvB;AAAgC,MAAA,IAAI,EAAC,UAArC;AAAgD,MAAA,OAAO,EAAC;AAAxD,MAtBJ;AAAA,IAFJ;AA2BH,CAhID;;AAmIA,eAAef,cAAf","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport {View, Text, TouchableOpacity, Alert, ActivityIndicator} from 'react-native'\r\nimport {Auth} from \"aws-amplify\"\r\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\r\nimport { DataStore } from '@aws-amplify/datastore';\r\nimport { Day, Exercises, User, Week, ExercisesStorage } from '../../models';\r\nimport _ from \"lodash\"\r\nimport moment, { months } from \"moment\";\r\nimport AgendaItems from \"./Agenda\";\r\nimport { useNavigation, useIsFocused} from \"@react-navigation/native\";\r\nimport CustomButton from \"../../componets/CustomButton\";\r\n\r\nlet currUser\r\n\r\nconst CalanderScreen = () => {\r\n    const navigation = useNavigation();\r\n    const isFocused = useIsFocused()\r\n\r\n    useEffect(() => {\r\n        //Update the state you want to be updated\r\n    } , [isFocused])\r\n    \r\n    const loadData = async ()=> {  \r\n\r\n        console.log(Auth.Credentials.Auth.user.username);\r\n        const username = Auth.Credentials.Auth.user.username;\r\n        currUser = await DataStore.query(User,  u => u.username(\"eq\", username))\r\n        console.log(\"loaded\");\r\n        setLoaded(true)\r\n\r\n     };\r\n\r\n    loadData();\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [refresh, setrefresh] = useState(false);\r\n\r\n    const signOut = ()=> {\r\n        Auth.signOut()\r\n    }\r\n\r\n    function getWeekBegin() {\r\n        var now = new Date();\r\n        var next = new Date(now.getFullYear(), now.getMonth(), now.getDate()+(7 - now.getDay()));\r\n        return next;\r\n     }\r\n\r\n    const convertArrayToObject = (array, key) => {\r\n        const initialValue = {};\r\n        return array.reduce((obj, item) => {\r\n          return {\r\n            ...obj,\r\n            [item[key]]: [{name: item.name}],\r\n          };\r\n        }, initialValue);\r\n      };\r\n    const GoToModScreen =  ()=> {\r\n        setLoaded(false)\r\n        navigation.navigate('ModifyScreen');\r\n    }\r\n\r\n    const getData =  ()=> {\r\n        let data = []\r\n        console.log(currUser)\r\n        currUser[0].TrainingDayList.forEach(x => {\r\n\r\n            x.exercisesDays.forEach(i => {\r\n                let exersizeString = \"Start Time: \"\r\n                \r\n                exersizeString=exersizeString + i.startTime+\"\\n\"\r\n                i.exercises.forEach(function(p, idx) {\r\n                    let num = (idx+1).toString()\r\n                    exersizeString =  exersizeString +num + \". \" + p.name + \" for \"+ p.numberOfReps + \" reps and for \" +p.sets + \" sets \\n\"\r\n                })\r\n                exersizeString = exersizeString +\"\\n\\n\"\r\n                data.push(new AgendaItems(i.Date,exersizeString))\r\n            })\r\n\r\n        })\r\n \r\n        let dataToReturn = convertArrayToObject(data,'date')\r\n       \r\n/*\r\n        {\r\n            \"2022-02-01\":[\r\n                {name:\"Whats up Food Stuff\"}\r\n                ],\r\n        \r\n            \"2022-02-01\":[\r\n                {name:\"Whats up Food Stuff\"}\r\n                ],\r\n\r\n        }\r\n        */\r\n       currUser= null;\r\n        return dataToReturn\r\n\r\n    }\r\n\r\n    const renderItem = (item, firstItemInDay) => {\r\n        return (\r\n          <TouchableOpacity>\r\n            <>\r\n                <Text style={{color: '#555'}}>{item.name}</Text>\r\n            </>\r\n          </TouchableOpacity>\r\n        );\r\n      } \r\n\r\n      if (loaded == false) {\r\n          return(            <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n          <ActivityIndicator></ActivityIndicator>\r\n      </View>)\r\n      }\r\n    let m = moment().format('YYYY-MM-DD')\r\n    return (\r\n        \r\n        <View  style={{flex:1}}>\r\n            <Agenda\r\n                \r\n                items={getData()}\r\n                \r\n                selected={m}\r\n                renderItem={(item, firstItemInDay) => {\r\n                    return (renderItem(item,firstItemInDay))\r\n                  }}\r\n\r\n                  renderEmptyDate={() => {\r\n                    return <Text>You do not have any workouts planed this day! Enjoy your day off.</Text>;\r\n                  }}\r\n                  renderEmptyData={() => {\r\n                    return <Text>You do not have any workouts planed this day! Enjoy your day off.</Text>;\r\n                  }}\r\n\r\n\r\n                  \r\n            />\r\n            \r\n            <CustomButton onPress={GoToModScreen} text=\"Change Schedule\" />\r\n            <CustomButton onPress={signOut} text=\"Sign Out\" bgColor=\"#E3242B\"/>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nexport default CalanderScreen;"]},"metadata":{},"sourceType":"module"}