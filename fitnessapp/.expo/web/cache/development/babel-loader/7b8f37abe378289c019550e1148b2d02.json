{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport throttle from 'lodash/throttle';\nimport XDate from 'xdate';\nimport Context from \"../expandableCalendar/Context\";\nimport { UpdateSources } from \"../expandableCalendar/commons\";\nimport { isToday } from \"../dateutils\";\nimport Timeline from \"../timeline/Timeline\";\nimport InfiniteList from \"../infinite-list\";\nimport useTimelinePages, { INITIAL_PAGE, NEAR_EDGE_THRESHOLD } from \"./useTimelinePages\";\nimport { createElement as _createElement } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar TimelineList = function TimelineList(props) {\n  var timelineProps = props.timelineProps,\n      events = props.events,\n      showNowIndicator = props.showNowIndicator;\n\n  var _useContext = useContext(Context),\n      date = _useContext.date,\n      updateSource = _useContext.updateSource,\n      setDate = _useContext.setDate;\n\n  var listRef = useRef();\n  var prevDate = useRef(date);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      timelineOffset = _useState2[0],\n      setTimelineOffset = _useState2[1];\n\n  var _useTimelinePages = useTimelinePages({\n    date: date,\n    listRef: listRef\n  }),\n      pages = _useTimelinePages.pages,\n      pagesRef = _useTimelinePages.pagesRef,\n      resetPages = _useTimelinePages.resetPages,\n      resetPagesDebounce = _useTimelinePages.resetPagesDebounce,\n      scrollToPageDebounce = _useTimelinePages.scrollToPageDebounce,\n      shouldResetPages = _useTimelinePages.shouldResetPages,\n      isOutOfRange = _useTimelinePages.isOutOfRange;\n\n  useEffect(function () {\n    if (date !== prevDate.current) {\n      var datePageIndex = pagesRef.current.indexOf(date);\n\n      if (updateSource !== UpdateSources.LIST_DRAG) {\n        if (isOutOfRange(datePageIndex)) {\n          updateSource === UpdateSources.DAY_PRESS ? resetPages(date) : resetPagesDebounce(date);\n        } else {\n          scrollToPageDebounce(datePageIndex);\n        }\n      }\n\n      prevDate.current = date;\n    }\n  }, [date, updateSource]);\n  var onScroll = useCallback(function () {\n    if (shouldResetPages.current) {\n      resetPagesDebounce.cancel();\n    }\n  }, []);\n  var onMomentumScrollEnd = useCallback(function () {\n    if (shouldResetPages.current) {\n      resetPagesDebounce(prevDate.current);\n    }\n  }, []);\n  var onPageChange = useCallback(throttle(function (pageIndex) {\n    var newDate = pagesRef.current[pageIndex];\n\n    if (newDate !== prevDate.current) {\n      setDate(newDate, UpdateSources.LIST_DRAG);\n    }\n  }, 0), []);\n  var onReachNearEdge = useCallback(function () {\n    shouldResetPages.current = true;\n  }, []);\n  var onTimelineOffsetChange = useCallback(function (offset) {\n    setTimelineOffset(offset);\n  }, []);\n  var renderPage = useCallback(function (_type, item) {\n    var timelineEvent = events[item];\n    var isCurrent = prevDate.current === item;\n    return _jsx(_Fragment, {\n      children: _createElement(Timeline, _objectSpread(_objectSpread({}, timelineProps), {}, {\n        key: item,\n        date: item,\n        scrollToFirst: false,\n        events: timelineEvent,\n        scrollOffset: isCurrent ? undefined : timelineOffset,\n        onChangeOffset: onTimelineOffsetChange,\n        showNowIndicator: showNowIndicator && isToday(new XDate(item))\n      }))\n    });\n  }, [events, timelineOffset, showNowIndicator]);\n  return _jsx(InfiniteList, {\n    ref: listRef,\n    data: pages,\n    renderItem: renderPage,\n    onPageChange: onPageChange,\n    onReachNearEdge: onReachNearEdge,\n    onReachNearEdgeThreshold: NEAR_EDGE_THRESHOLD,\n    onScroll: onScroll,\n    extendedState: {\n      todayEvents: events[date],\n      pages: pages\n    },\n    initialPageIndex: INITIAL_PAGE,\n    scrollViewProps: {\n      onMomentumScrollEnd: onMomentumScrollEnd\n    }\n  });\n};\n\nexport default TimelineList;","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/node_modules/react-native-calendars/src/timeline-list/index.js"],"names":["React","useCallback","useContext","useEffect","useRef","useState","throttle","XDate","Context","UpdateSources","isToday","Timeline","InfiniteList","useTimelinePages","INITIAL_PAGE","NEAR_EDGE_THRESHOLD","TimelineList","props","timelineProps","events","showNowIndicator","date","updateSource","setDate","listRef","prevDate","timelineOffset","setTimelineOffset","pages","pagesRef","resetPages","resetPagesDebounce","scrollToPageDebounce","shouldResetPages","isOutOfRange","current","datePageIndex","indexOf","LIST_DRAG","DAY_PRESS","onScroll","cancel","onMomentumScrollEnd","onPageChange","pageIndex","newDate","onReachNearEdge","onTimelineOffsetChange","offset","renderPage","_type","item","timelineEvent","isCurrent","undefined","todayEvents"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\n// import {Text} from 'react-native';\nimport throttle from 'lodash/throttle';\nimport XDate from 'xdate';\nimport Context from '../expandableCalendar/Context';\nimport { UpdateSources } from '../expandableCalendar/commons';\nimport { isToday } from '../dateutils';\nimport Timeline from '../timeline/Timeline';\nimport InfiniteList from '../infinite-list';\nimport useTimelinePages, { INITIAL_PAGE, NEAR_EDGE_THRESHOLD } from './useTimelinePages';\nconst TimelineList = (props) => {\n    const { timelineProps, events, showNowIndicator } = props;\n    const { date, updateSource, setDate } = useContext(Context);\n    const listRef = useRef();\n    const prevDate = useRef(date);\n    const [timelineOffset, setTimelineOffset] = useState();\n    const { pages, pagesRef, resetPages, resetPagesDebounce, scrollToPageDebounce, shouldResetPages, isOutOfRange } = useTimelinePages({ date, listRef });\n    useEffect(() => {\n        if (date !== prevDate.current) {\n            const datePageIndex = pagesRef.current.indexOf(date);\n            if (updateSource !== UpdateSources.LIST_DRAG) {\n                if (isOutOfRange(datePageIndex)) {\n                    updateSource === UpdateSources.DAY_PRESS ? resetPages(date) : resetPagesDebounce(date);\n                }\n                else {\n                    scrollToPageDebounce(datePageIndex);\n                }\n            }\n            prevDate.current = date;\n        }\n    }, [date, updateSource]);\n    const onScroll = useCallback(() => {\n        if (shouldResetPages.current) {\n            resetPagesDebounce.cancel();\n        }\n    }, []);\n    const onMomentumScrollEnd = useCallback(() => {\n        if (shouldResetPages.current) {\n            resetPagesDebounce(prevDate.current);\n        }\n    }, []);\n    const onPageChange = useCallback(throttle((pageIndex) => {\n        const newDate = pagesRef.current[pageIndex];\n        if (newDate !== prevDate.current) {\n            setDate(newDate, UpdateSources.LIST_DRAG);\n        }\n    }, 0), []);\n    const onReachNearEdge = useCallback(() => {\n        shouldResetPages.current = true;\n    }, []);\n    const onTimelineOffsetChange = useCallback(offset => {\n        setTimelineOffset(offset);\n    }, []);\n    const renderPage = useCallback((_type, item) => {\n        const timelineEvent = events[item];\n        const isCurrent = prevDate.current === item;\n        return (<>\n          <Timeline {...timelineProps} key={item} date={item} scrollToFirst={false} events={timelineEvent} scrollOffset={isCurrent ? undefined : timelineOffset} onChangeOffset={onTimelineOffsetChange} showNowIndicator={showNowIndicator && isToday(new XDate(item))}/>\n          {/* NOTE: Keeping this for easy debugging */}\n          {/* <Text style={{position: 'absolute'}}>{item}</Text> */}\n        </>);\n    }, [events, timelineOffset, showNowIndicator]);\n    return (<InfiniteList ref={listRef} data={pages} renderItem={renderPage} onPageChange={onPageChange} onReachNearEdge={onReachNearEdge} onReachNearEdgeThreshold={NEAR_EDGE_THRESHOLD} onScroll={onScroll} extendedState={{ todayEvents: events[date], pages }} initialPageIndex={INITIAL_PAGE} scrollViewProps={{\n            onMomentumScrollEnd\n        }}/>);\n};\nexport default TimelineList;\n"]},"metadata":{},"sourceType":"module"}