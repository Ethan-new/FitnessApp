{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Auth } from \"aws-amplify\";\nimport moment, { months } from \"moment\";\nimport { DataStore } from '@aws-amplify/datastore';\nimport { Day, Exercises, User, Week, ExercisesStorage, CalDays, Cals } from \"../../models\";\nimport _ from \"lodash\";\nimport { useNavigation, useIsFocused } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction getTodaysDate() {\n  var next = new Date();\n  return next;\n}\n\nfunction getWeekBegin() {\n  var now = new Date();\n  var next = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\n  return next;\n}\n\nvar CalorieScreen = function CalorieScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currUser = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userInput = _useState6[0],\n      setUserInput = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currDate = _useState8[0],\n      setDate = _useState8[1];\n\n  var GoToHome = function GoToHome() {\n    navigation.navigate('Home');\n  };\n\n  var IsFocused = useIsFocused();\n  useEffect(function () {\n    loadData();\n  }, [IsFocused]);\n\n  function loadData() {\n    var username, user, today;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log(Auth.Credentials.Auth.user.username);\n            username = Auth.Credentials.Auth.user.username;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(DataStore.query(User, function (u) {\n              return u.username(\"eq\", username);\n            }));\n\n          case 5:\n            user = _context.sent;\n            setUser(user[0]);\n            today = new Date();\n            user[0].CalCount.allDays.forEach(function (x) {\n              if (x.Date == today.toString()) {\n                setDate(x);\n              }\n            });\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n            setLoaded(true);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  }\n\n  ;\n\n  if (loaded == false) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {})\n    });\n  }\n\n  console.log(currUser);\n  console.log(currDate);\n  return _jsx(_Fragment, {\n    children: _jsx(TextInput, {\n      style: styles.input,\n      onChangeText: function onChangeText(t) {\n        return setUserInput(t);\n      },\n      value: userInput\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default CalorieScreen;","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/src/screens/CalorieScreen/CalorieScreen.js"],"names":["React","useState","useEffect","Auth","moment","months","DataStore","Day","Exercises","User","Week","ExercisesStorage","CalDays","Cals","_","useNavigation","useIsFocused","getTodaysDate","next","Date","getWeekBegin","now","getFullYear","getMonth","getDate","getDay","CalorieScreen","navigation","loaded","setLoaded","undefined","currUser","setUser","userInput","setUserInput","currDate","setDate","GoToHome","navigate","IsFocused","loadData","console","log","Credentials","user","username","query","u","today","CalCount","allDays","forEach","x","toString","flex","justifyContent","alignItems","styles","input","t","StyleSheet","create","height","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport {View, Text, TouchableOpacity, Alert, ActivityIndicator,StyleSheet,Pressable, TextInput} from 'react-native'\r\nimport {Auth} from \"aws-amplify\"\r\n\r\nimport moment, { months } from \"moment\";\r\nimport { DataStore } from '@aws-amplify/datastore';\r\nimport { Day, Exercises, User, Week, ExercisesStorage, CalDays, Cals } from '../../models';\r\nimport _ from \"lodash\"\r\n\r\nimport { useNavigation, useIsFocused} from \"@react-navigation/native\";\r\n\r\n\r\nfunction getTodaysDate() {\r\n  var next = new Date();\r\n  return next;\r\n}\r\n\r\nfunction getWeekBegin() {\r\n  var now = new Date();\r\n  var next = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\r\n  return next;\r\n}\r\n\r\n\r\nconst CalorieScreen = () => {\r\n    const navigation = useNavigation();\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [currUser, setUser]= useState(undefined)\r\n    const [userInput, setUserInput]= useState(null)\r\n    const [currDate, setDate]= useState(null)\r\n\r\n\r\n  const GoToHome =  ()=> {\r\n    \r\n    navigation.navigate('Home');\r\n}\r\n    \r\n\r\n  const IsFocused = useIsFocused()\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    } , [IsFocused])\r\n    \r\n\r\n    async function loadData() {\r\n      try {\r\n          console.log(Auth.Credentials.Auth.user.username);\r\n          const username = Auth.Credentials.Auth.user.username;\r\n          let user = await DataStore.query(User,  u => u.username(\"eq\", username))\r\n          setUser(user[0])\r\n          \r\n          \r\n          const today = new Date()\r\n          /*\r\n          user[0].CalCount.allDays.forEach ((x)=> {\r\n            \r\n            if (x.Date == today.toString()) {\r\n              setDate(x)\r\n            }\r\n          })\r\n\r\n          if (currDate == undefined  ) {\r\n            console.log(\"made new day\")\r\n\r\n              const newDayToAdd = new CalDays({\r\n              \"Date\": today.toString(),\r\n              \"currCals\": \"0\",\r\n              \"foodItems\": [],\r\n              \"goalCals\": user[0].CalCount.currTargetCals\r\n            })\r\n            const deepCopyWithLodashCloneDeep = _.cloneDeep(user[0].CalCount.allDays)\r\n \r\n            deepCopyWithLodashCloneDeep.push(newDayToAdd)\r\n\r\n            const newCals = new Cals({\r\n              \"currTargetCals\": user[0].CalCount.currTargetCals,\r\n              \"allDays\": newDayToAdd,\r\n            })\r\n            console.log(deepCopyWithLodashCloneDeep)\r\n            DataStore.save(\r\n              User.copyOf(user[0], updated => {\r\n              updated.CalCount = newCals;\r\n              })\r\n          )\r\n          }\r\n          */\r\n\r\n          user[0].CalCount.allDays.forEach ((x)=> {\r\n            \r\n            if (x.Date == today.toString()) {\r\n              setDate(x)\r\n            }\r\n          })\r\n\r\n      } catch (err) {console.log(err)}\r\n\r\n        setLoaded(true)\r\n\r\n     };\r\n\r\n      if (loaded == false) {\r\n        \r\n          return(\r\n          <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator></ActivityIndicator>\r\n          </View>)\r\n      }\r\n      console.log(currUser)\r\n      console.log(currDate)\r\n\r\n    return (\r\n        \r\n       <>\r\n          <TextInput\r\n            style={styles.input}\r\n            onChangeText={t => setUserInput(t)}\r\n            value={userInput}\r\n      />\r\n       </>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    height: 40,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n  },\r\n});\r\n\r\n\r\nexport default CalorieScreen;"]},"metadata":{},"sourceType":"module"}