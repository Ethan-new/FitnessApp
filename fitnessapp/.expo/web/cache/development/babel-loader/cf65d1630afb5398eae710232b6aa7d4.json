{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport isEqual from 'lodash.isequal';\nimport RadioButton from \"./RadioButton\";\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function RadioGroup(_ref) {\n  var containerStyle = _ref.containerStyle,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? 'column' : _ref$layout,\n      onPress = _ref.onPress,\n      radioButtons = _ref.radioButtons;\n\n  var _useState = useState(radioButtons),\n      _useState2 = _slicedToArray(_useState, 2),\n      radioButtonsLocal = _useState2[0],\n      setRadioButtonsLocal = _useState2[1];\n\n  if (!isEqual(radioButtons, radioButtonsLocal)) {\n    setRadioButtonsLocal(radioButtons);\n  }\n\n  function handlePress(id) {\n    for (var _iterator = _createForOfIteratorHelperLoose(radioButtonsLocal), _step; !(_step = _iterator()).done;) {\n      var button = _step.value;\n      if (button.selected && button.id === id) return;\n      button.selected = button.id === id;\n    }\n\n    setRadioButtonsLocal(_toConsumableArray(radioButtonsLocal));\n\n    if (onPress) {\n      onPress(radioButtonsLocal);\n    }\n  }\n\n  return _jsx(View, {\n    style: [styles.container, {\n      flexDirection: layout\n    }, containerStyle],\n    children: radioButtonsLocal.map(function (button) {\n      return _createElement(RadioButton, _objectSpread(_objectSpread({}, button), {}, {\n        key: button.id,\n        onPress: function onPress(id) {\n          handlePress(id);\n\n          if (button.onPress && typeof button.onPress === 'function') {\n            button.onPress(id);\n          }\n        }\n      }));\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/spart/Documents/GitHub/FitnessApp/fitnessapp/node_modules/react-native-radio-buttons-group/lib/RadioGroup.tsx"],"names":["React","useState","isEqual","RadioButton","RadioGroup","containerStyle","layout","onPress","radioButtons","radioButtonsLocal","setRadioButtonsLocal","handlePress","id","button","selected","styles","container","flexDirection","map","StyleSheet","create","alignItems"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,WAAP;;;AAGA,eAAe,SAASC,UAAT,OAAmG;AAAA,MAA7EC,cAA6E,QAA7EA,cAA6E;AAAA,yBAA7DC,MAA6D;AAAA,MAA7DA,MAA6D,4BAApD,QAAoD;AAAA,MAA1CC,OAA0C,QAA1CA,OAA0C;AAAA,MAAjCC,YAAiC,QAAjCA,YAAiC;;AAEhH,kBAAkDP,QAAQ,CAAqBO,YAArB,CAA1D;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEA,MAAG,CAACR,OAAO,CAACM,YAAD,EAAeC,iBAAf,CAAX,EAA8C;AAC5CC,IAAAA,oBAAoB,CAACF,YAAD,CAApB;AACD;;AAED,WAASG,WAAT,CAAqBC,EAArB,EAAiC;AAC/B,yDAAqBH,iBAArB,wCAAwC;AAAA,UAA7BI,MAA6B;AACtC,UAAIA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACD,EAAP,KAAcA,EAArC,EAAyC;AACzCC,MAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACD,EAAP,KAAcA,EAAhC;AACD;;AACDF,IAAAA,oBAAoB,oBAAKD,iBAAL,EAApB;;AACA,QAAIF,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACE,iBAAD,CAAP;AACD;AACF;;AAED,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACC,SAAR,EAAmB;AAAEC,MAAAA,aAAa,EAAEX;AAAjB,KAAnB,EAA8CD,cAA9C,CAAb;AAAA,cACGI,iBAAiB,CAACS,GAAlB,CAAsB,UAACL,MAAD;AAAA,aACrB,eAAC,WAAD,kCACMA,MADN;AAEE,QAAA,GAAG,EAAEA,MAAM,CAACD,EAFd;AAGE,QAAA,OAAO,EAAE,iBAACA,EAAD,EAAgB;AACvBD,UAAAA,WAAW,CAACC,EAAD,CAAX;;AACA,cAAIC,MAAM,CAACN,OAAP,IAAkB,OAAOM,MAAM,CAACN,OAAd,KAA0B,UAAhD,EAA4D;AAC1DM,YAAAA,MAAM,CAACN,OAAP,CAAeK,EAAf;AACD;AACF;AARH,SADqB;AAAA,KAAtB;AADH,IADF;AAgBD;AAED,IAAMG,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,UAAU,EAAE;AADH;AADoB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport RadioButton from './RadioButton';\r\nimport { RadioButtonProps, RadioGroupProps } from './types';\r\n\r\nexport default function RadioGroup({ containerStyle, layout = 'column', onPress, radioButtons }: RadioGroupProps) {\r\n\r\n  const [radioButtonsLocal, setRadioButtonsLocal] = useState<RadioButtonProps[]>(radioButtons);\r\n\r\n  if(!isEqual(radioButtons, radioButtonsLocal)) {\r\n    setRadioButtonsLocal(radioButtons);\r\n  }\r\n\r\n  function handlePress(id: string) {\r\n    for (const button of radioButtonsLocal) {\r\n      if (button.selected && button.id === id) return;\r\n      button.selected = button.id === id;\r\n    }\r\n    setRadioButtonsLocal([...radioButtonsLocal]);\r\n    if (onPress) {\r\n      onPress(radioButtonsLocal);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={[styles.container, { flexDirection: layout }, containerStyle]}>\r\n      {radioButtonsLocal.map((button) => (\r\n        <RadioButton\r\n          {...button}\r\n          key={button.id}\r\n          onPress={(id: string) => {\r\n            handlePress(id);\r\n            if (button.onPress && typeof button.onPress === 'function') {\r\n              button.onPress(id);\r\n            }\r\n          }}\r\n        />\r\n      ))}\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: 'center',\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}