{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Auth } from \"aws-amplify\";\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport { DataStore } from '@aws-amplify/datastore';\nimport { Day, Exercises, User, Week, ExercisesStorage } from \"../../models\";\nimport _ from \"lodash\";\nimport moment, { months } from \"moment\";\nimport AgendaItems from \"./Agenda\";\nimport { useNavigation, useIsFocused } from \"@react-navigation/native\";\nimport CustomButton from \"../../componets/CustomButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar currUser;\n\nvar CalanderScreen = function CalanderScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currUser = _useState4[0],\n      setUser = _useState4[1];\n\n  useEffect(function () {\n    loadData();\n  }, []);\n\n  function loadData() {\n    var username, temp;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log(Auth.Credentials.Auth.user.username);\n            username = Auth.Credentials.Auth.user.username;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(DataStore.query(User, function (u) {\n              return u.username(\"eq\", username);\n            }));\n\n          case 5:\n            temp = _context.sent;\n            setUser(temp[0]);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n            console.log(\"loaded\");\n            setLoaded(true);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n\n  ;\n  loadData();\n\n  var signOut = function signOut() {\n    Auth.signOut();\n  };\n\n  var renderItem = function renderItem(item, firstItemInDay) {\n    return _jsx(TouchableOpacity, {\n      children: _jsx(_Fragment, {\n        children: _jsx(Text, {\n          style: {\n            color: '#555'\n          },\n          children: item.name\n        })\n      })\n    });\n  };\n\n  if (loaded == false) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {})\n    });\n  }\n\n  return _jsx(_Fragment, {});\n};\n\nexport default CalanderScreen;","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/src/screens/CalanderScreen/CalanderScreen.js"],"names":["React","useState","useEffect","Auth","Calendar","CalendarList","Agenda","DataStore","Day","Exercises","User","Week","ExercisesStorage","_","moment","months","AgendaItems","useNavigation","useIsFocused","CustomButton","currUser","CalanderScreen","navigation","loaded","setLoaded","undefined","setUser","loadData","console","log","Credentials","user","username","query","u","temp","signOut","renderItem","item","firstItemInDay","color","name","flex","justifyContent","alignItems"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;;;;;AAEA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,QAAR,EAAkBC,YAAlB,EAAgCC,MAAhC,QAA6C,wBAA7C;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,gBAArC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,QAA/B;AACA,OAAOC,WAAP;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA2C,0BAA3C;AACA,OAAOC,YAAP;;;AAEA,IAAIC,QAAJ;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,UAAU,GAAGL,aAAa,EAAhC;;AACA,kBAA4BhB,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOsB,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA2BvB,QAAQ,CAACwB,SAAD,CAAnC;AAAA;AAAA,MAAOL,QAAP;AAAA,MAAiBM,OAAjB;;AAGAxB,EAAAA,SAAS,CAAC,YAAM;AACZyB,IAAAA,QAAQ;AACX,GAFQ,EAEL,EAFK,CAAT;;AAIA,WAAeA,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMC,YAAAA,OAAO,CAACC,GAAR,CAAY1B,IAAI,CAAC2B,WAAL,CAAiB3B,IAAjB,CAAsB4B,IAAtB,CAA2BC,QAAvC;AACMA,YAAAA,QAHZ,GAGuB7B,IAAI,CAAC2B,WAAL,CAAiB3B,IAAjB,CAAsB4B,IAAtB,CAA2BC,QAHlD;AAAA;AAAA,6CAIuBzB,SAAS,CAAC0B,KAAV,CAAgBvB,IAAhB,EAAuB,UAAAwB,CAAC;AAAA,qBAAIA,CAAC,CAACF,QAAF,CAAW,IAAX,EAAiBA,QAAjB,CAAJ;AAAA,aAAxB,CAJvB;;AAAA;AAIUG,YAAAA,IAJV;AAKMT,YAAAA,OAAO,CAACS,IAAI,CAAC,CAAD,CAAL,CAAP;AALN;AAAA;;AAAA;AAAA;AAAA;AAOiBP,YAAAA,OAAO,CAACC,GAAR;;AAPjB;AASID,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAL,YAAAA,SAAS,CAAC,IAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYE;AAEFG,EAAAA,QAAQ;;AAER,MAAMS,OAAO,GAAG,SAAVA,OAAU,GAAK;AACjBjC,IAAAA,IAAI,CAACiC,OAAL;AACH,GAFD;;AAKA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,cAAP,EAA0B;AACzC,WACE,KAAC,gBAAD;AAAA,gBACE;AAAA,kBACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA,oBAA+BF,IAAI,CAACG;AAApC;AADJ;AADF,MADF;AAOD,GARH;;AAUE,MAAIlB,MAAM,IAAI,KAAd,EAAqB;AACjB,WACA,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACmB,QAAAA,IAAI,EAAC,CAAN;AAASC,QAAAA,cAAc,EAAC,QAAxB;AAAiCC,QAAAA,UAAU,EAAC;AAA5C,OAAb;AAAA,gBACE,KAAC,iBAAD;AADF,MADA;AAIH;;AAEH,SAEG,mBAFH;AAMH,CAtDD;;AAyDA,eAAevB,cAAf","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport {View, Text, TouchableOpacity, Alert, ActivityIndicator} from 'react-native'\r\nimport {Auth} from \"aws-amplify\"\r\nimport {Calendar, CalendarList, Agenda} from 'react-native-calendars';\r\nimport { DataStore } from '@aws-amplify/datastore';\r\nimport { Day, Exercises, User, Week, ExercisesStorage } from '../../models';\r\nimport _ from \"lodash\"\r\nimport moment, { months } from \"moment\";\r\nimport AgendaItems from \"./Agenda\";\r\nimport { useNavigation, useIsFocused} from \"@react-navigation/native\";\r\nimport CustomButton from \"../../componets/CustomButton\";\r\n\r\nlet currUser\r\n\r\nconst CalanderScreen = () => {\r\n    const navigation = useNavigation();\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [currUser, setUser]= useState(undefined)\r\n\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    } , [])\r\n    \r\n    async function loadData() {\r\n      try {\r\n          console.log(Auth.Credentials.Auth.user.username);\r\n          const username = Auth.Credentials.Auth.user.username;\r\n          let temp = await DataStore.query(User,  u => u.username(\"eq\", username))\r\n          setUser(temp[0])\r\n\r\n      } catch (err) {console.log(err)}\r\n\r\n        console.log(\"loaded\");\r\n        setLoaded(true)\r\n\r\n     };\r\n\r\n    loadData();\r\n\r\n    const signOut = ()=> {\r\n        Auth.signOut()\r\n    }\r\n\r\n\r\n    const renderItem = (item, firstItemInDay) => {\r\n        return (\r\n          <TouchableOpacity>\r\n            <>\r\n                <Text style={{color: '#555'}}>{item.name}</Text>\r\n            </>\r\n          </TouchableOpacity>\r\n        );\r\n      } \r\n\r\n      if (loaded == false) {\r\n          return(\r\n          <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator></ActivityIndicator>\r\n          </View>)\r\n      }\r\n\r\n    return (\r\n        \r\n       <>\r\n       \r\n       </>\r\n    )\r\n}\r\n\r\n\r\nexport default CalanderScreen;"]},"metadata":{},"sourceType":"module"}