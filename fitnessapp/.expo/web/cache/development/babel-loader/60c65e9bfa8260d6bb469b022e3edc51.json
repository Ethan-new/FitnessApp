{"ast":null,"code":"import React from 'react';\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RadioButton(_ref) {\n  var borderColor = _ref.borderColor,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#444' : _ref$color,\n      containerStyle = _ref.containerStyle,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      id = _ref.id,\n      label = _ref.label,\n      labelStyle = _ref.labelStyle,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? 'row' : _ref$layout,\n      onPress = _ref.onPress,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size;\n  var borderWidth = PixelRatio.roundToNearestPixel(size * 0.1);\n  var sizeHalf = PixelRatio.roundToNearestPixel(size * 0.5);\n  var sizeFull = PixelRatio.roundToNearestPixel(size);\n  var orientation = {\n    flexDirection: 'row'\n  };\n  var margin = {\n    marginLeft: 10\n  };\n\n  if (layout === 'column') {\n    orientation = {\n      alignItems: 'center'\n    };\n    margin = {\n      marginTop: 10\n    };\n  }\n\n  function handlePress() {\n    if (disabled) {\n      return null;\n    }\n\n    if (onPress) {\n      onPress(id);\n    }\n  }\n\n  return _jsxs(Pressable, {\n    onPress: handlePress,\n    style: [styles.container, orientation, {\n      opacity: disabled ? 0.2 : 1\n    }, containerStyle],\n    children: [_jsx(View, {\n      style: [styles.border, {\n        borderColor: borderColor || color,\n        borderWidth: borderWidth,\n        width: sizeFull,\n        height: sizeFull,\n        borderRadius: sizeHalf\n      }],\n      children: selected && _jsx(View, {\n        style: {\n          backgroundColor: color,\n          width: sizeHalf,\n          height: sizeHalf,\n          borderRadius: sizeHalf\n        }\n      })\n    }), Boolean(label) && _jsx(Text, {\n      style: [margin, labelStyle],\n      children: label\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    marginHorizontal: 10,\n    marginVertical: 5\n  },\n  border: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/node_modules/react-native-radio-buttons-group/lib/RadioButton.tsx"],"names":["React","RadioButton","borderColor","color","containerStyle","disabled","id","label","labelStyle","layout","onPress","selected","size","borderWidth","PixelRatio","roundToNearestPixel","sizeHalf","sizeFull","orientation","flexDirection","margin","marginLeft","alignItems","marginTop","handlePress","styles","container","opacity","border","width","height","borderRadius","backgroundColor","Boolean","StyleSheet","create","marginHorizontal","marginVertical","justifyContent"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { PixelRatio, Pressable, StyleSheet, Text, View } from 'react-native';\r\n\r\nimport { RadioButtonProps } from './types';\r\n\r\nexport default function RadioButton({\r\n  borderColor,\r\n  color = '#444',\r\n  containerStyle,\r\n  disabled = false,\r\n  id,\r\n  label,\r\n  labelStyle,\r\n  layout = 'row',\r\n  onPress,\r\n  selected = false,\r\n  size = 24 }: RadioButtonProps) {\r\n\r\n  const borderWidth = PixelRatio.roundToNearestPixel(size * 0.1);\r\n  const sizeHalf = PixelRatio.roundToNearestPixel(size * 0.5);\r\n  const sizeFull = PixelRatio.roundToNearestPixel(size);\r\n\r\n  let orientation: any = { flexDirection: 'row' }\r\n  let margin: any = { marginLeft: 10 };\r\n\r\n  if (layout === 'column') {\r\n    orientation = { alignItems: 'center' };\r\n    margin = { marginTop: 10 };\r\n  }\r\n\r\n  function handlePress() {\r\n    if (disabled) {\r\n      return null;\r\n    }\r\n    if (onPress) {\r\n      onPress(id);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Pressable\r\n      onPress={handlePress}\r\n      style={[styles.container, orientation, { opacity: disabled ? 0.2 : 1 }, containerStyle]}\r\n    >\r\n      <View\r\n        style={[\r\n          styles.border,\r\n          {\r\n            borderColor: borderColor || color,\r\n            borderWidth,\r\n            width: sizeFull,\r\n            height: sizeFull,\r\n            borderRadius: sizeHalf\r\n          }\r\n        ]}>\r\n        {selected && (\r\n          <View\r\n            style={{\r\n              backgroundColor: color,\r\n              width: sizeHalf,\r\n              height: sizeHalf,\r\n              borderRadius: sizeHalf\r\n            }}\r\n          />\r\n        )}\r\n      </View>\r\n      {\r\n        Boolean(label) && <Text style={[margin, labelStyle]}>{label}</Text>\r\n      }\r\n    </Pressable>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: 'center',\r\n    marginHorizontal: 10,\r\n    marginVertical: 5\r\n  },\r\n  border: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}