{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"onValueChange\", \"selectedValue\", \"itemStyle\", \"mode\", \"prompt\", \"dropdownIconColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from \"react-native-web/dist/index\";\nimport { forwardRef, useRef } from 'react';\nimport PickerItem from \"./PickerItem\";\nimport createElement from \"react-native-web/dist/exports/createElement\";\nvar Select = forwardRef(function (props, forwardedRef) {\n  return createElement('select', props);\n});\nvar Picker = forwardRef(function (props, forwardedRef) {\n  var enabled = props.enabled,\n      onValueChange = props.onValueChange,\n      selectedValue = props.selectedValue,\n      itemStyle = props.itemStyle,\n      mode = props.mode,\n      prompt = props.prompt,\n      dropdownIconColor = props.dropdownIconColor,\n      other = _objectWithoutProperties(props, _excluded);\n\n  var hostRef = useRef(null);\n  var handleChange = React.useCallback(function (e) {\n    var _e$target = e.target,\n        selectedIndex = _e$target.selectedIndex,\n        value = _e$target.value;\n\n    if (onValueChange) {\n      onValueChange(value, selectedIndex);\n    }\n  }, [onValueChange]);\n  return React.createElement(Select, _extends({\n    disabled: enabled === false ? true : undefined,\n    onChange: handleChange,\n    ref: hostRef,\n    value: selectedValue\n  }, other));\n});\nPicker.Item = PickerItem;\nexport default Picker;","map":{"version":3,"sources":["Picker.web.js"],"names":["enabled","selectedIndex","value","onValueChange","hostRef","selectedValue","other","Picker"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;OACO,KAAP,c;AACA,SAAA,UAAA,EAAA,MAAA,QAAA,OAAA;AAIA,OAAA,UAAA;;AA8BE,IAAA,MAAM,GAAA,UAAA,CAAA,UAAA,KAAA,EAAA,YAAA;AAAA,SAAA,aAAA,CAAA,QAAA,EAAA,KAAA,CAAA;AAAA,CAAA,CAAN;AACEA,IADI,MAAA,GAAA,UAAA,CAAA,UAAA,KAAA,EAAA,YAAA,EAAA;AAAA,MAAA,OAAA,GAaN,KAbM,CAAA,OAAA;AAAA,MAAA,aAAA,GAaN,KAbM,CAAA,aAAA;AAAA,MAAA,aAAA,GAaN,KAbM,CAAA,aAAA;AAAA,MAAA,SAAA,GAaN,KAbM,CAAA,SAAA;AAAA,MAAA,IAAA,GAaN,KAbM,CAAA,IAAA;AAAA,MAQJ,MARI,GAaN,KAbM,CAQJ,MARI;AAAA,MAAN,iBAAM,GAaN,KAbM,CAAN,iBAAM;AAAA,MAWN,KAXM,4BAaN,KAbM;;AAeF,MAAA,OAAM,GAAA,MAAA,CAAA,IAAA,CAAN;AAAOC,MAAD,YAAA,GAAA,KAAA,CAAA,WAAA,CAAA,UAAA,CAAA,EAAA;AAAgBC,oBAClBC,CAAAA,CAAJ,MADsBD;AAAAA,QAAtB,aAAsBA,aAAtB,aAAsBA;AAAAA,Q,KAAAA,a,KAAAA;;AAGrB,QAAA,aAAA,EAAA;AAEFC,MAAAA,aAAD,CAPF,KAOE,EAPF,aAOE,CAACA;AAGH;AAAA,GARU,EAQV,CAAA,aAAA,CARU,CAACF;AAST,SAGE,KAAA,CAAA,aAAA,CAFF,MAEE,EAFF,QAAA,CAAA;AAGE,IAAA,QAAKG,EAHP,OAAA,KAAA,KAAA,GAAA,IAAA,GAAA,SAAA;AAIE,IAAA,QAAOC,EAAAA,YAJT;AAAA,IAAA,GAKMC,EALN,OAAA;AAFF,IAAA,KAAA,EAAA;AAEE,GAAA,EAUJ,KAVI,CAEE,CAHF;AAYJC,CApCQ,CACJP","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst createElement =\n  ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  createElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}