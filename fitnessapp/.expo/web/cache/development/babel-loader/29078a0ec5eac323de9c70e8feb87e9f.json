{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Auth } from \"aws-amplify\";\nimport moment, { months } from \"moment\";\nimport { DataStore } from '@aws-amplify/datastore';\nimport { Day, Exercises, User, Week, ExercisesStorage, CalDays, Cals, DailyFoodItems } from \"../../models\";\nimport _ from \"lodash\";\nimport { useNavigation, useIsFocused } from \"@react-navigation/native\";\nimport { FoodItems } from \"../../models\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction getTodaysDate() {\n  var next = new Date();\n  return next;\n}\n\nfunction getWeekBegin() {\n  var now = new Date();\n  var next = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\n  return next;\n}\n\nvar CalorieScreen = function CalorieScreen() {\n  var navigation = useNavigation();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currUser = _useState4[0],\n      setUser = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userInput = _useState6[0],\n      setUserInput = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      userInputQua = _useState8[0],\n      setUserInputQua = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currDate = _useState10[0],\n      setCurrDate = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currFood = _useState12[0],\n      setCurrFood = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      allFood = _useState14[0],\n      setAllFood = _useState14[1];\n\n  var GoToHome = function GoToHome() {\n    navigation.navigate('Home');\n  };\n\n  var GoToView = function GoToView() {\n    navigation.navigate('ViewScreen');\n  };\n\n  var IsFocused = useIsFocused();\n  useEffect(function () {\n    loadData();\n  }, [IsFocused]);\n\n  function prevDay() {}\n\n  function NextDay() {}\n\n  function loadData() {\n    var username, user, allfood, today, newday, newDayToAdd, deepCopyWithLodashCloneDeep, newCals;\n    return _regeneratorRuntime.async(function loadData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            username = Auth.Credentials.Auth.user.username;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(DataStore.query(User, function (u) {\n              return u.username(\"eq\", username);\n            }));\n\n          case 4:\n            user = _context.sent;\n            setUser(user[0]);\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(DataStore.query(FoodItems));\n\n          case 8:\n            allfood = _context.sent;\n            setAllFood(allfood);\n            today = new Date();\n            newday = true;\n            user[0].CalCount.allDays.forEach(function (x) {\n              if (x.Date.slice(0, 16) === today.toString().slice(0, 16)) {\n                setCurrDate(x);\n                newday = false;\n              }\n            });\n\n            if (!(newday == true)) {\n              _context.next = 21;\n              break;\n            }\n\n            console.log(\"made new day\");\n            newDayToAdd = new CalDays({\n              \"Date\": today.toString(),\n              \"currCals\": \"0\",\n              \"foodItems\": [],\n              \"goalCals\": user[0].CalCount.currTargetCals\n            });\n            deepCopyWithLodashCloneDeep = _.cloneDeep(user[0].CalCount.allDays);\n            deepCopyWithLodashCloneDeep.push(newDayToAdd);\n            newCals = new Cals({\n              \"currTargetCals\": user[0].CalCount.currTargetCals,\n              \"allDays\": deepCopyWithLodashCloneDeep\n            });\n            _context.next = 21;\n            return _regeneratorRuntime.awrap(DataStore.save(User.copyOf(user[0], function (updated) {\n              updated.height = user[0].height;\n              updated.weight = user[0].weight;\n              updated.gender = user[0].gender;\n              updated.numberOfPreferedExercises = user[0].numberOfPreferedExercises;\n              updated.CalCount = newCals;\n              updated.TrainingDayList = [user[0].TrainingDayList[0], user[0].TrainingDayList[0]];\n              updated.username = user[0].username;\n            })));\n\n          case 21:\n            user[0].CalCount.allDays.forEach(function (x) {\n              if (x.Date.slice(0, 16) === today.toString().slice(0, 16)) {\n                setCurrDate(x);\n              }\n            });\n            _context.next = 27;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 27:\n            setLoaded(true);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 24]], Promise);\n  }\n\n  ;\n\n  function addItem() {\n    var isitemfound = false;\n    var itemfound;\n    allFood.forEach(function (x) {\n      if (x.name == userInput) {\n        isitemfound = true;\n        itemfound = x;\n      }\n    });\n\n    if (isitemfound == true) {\n      var foodnamecap = itemfound.name.charAt(0).toUpperCase() + itemfound.name.slice(1);\n      var totalcal = parseInt(itemfound.calperpound, 10) * parseInt(userInputQua, 10);\n      var newFoodtoAdd = new DailyFoodItems({\n        \"name\": foodnamecap,\n        \"weight\": userInputQua,\n        \"calCount\": totalcal.toString()\n      });\n\n      var deepCopyWithLodashCloneDeep = _.cloneDeep(currDate);\n\n      deepCopyWithLodashCloneDeep.foodItems.push(newFoodtoAdd);\n      console.log(\"Food\");\n      console.log(deepCopyWithLodashCloneDeep.foodItems);\n      var newCalCount = parseInt(currDate.currCals, 10) + totalcal;\n      setCurrFood(deepCopyWithLodashCloneDeep.foodItems);\n      var updatedDay = new CalDays({\n        \"Date\": currDate.Date,\n        \"currCals\": newCalCount.toString(),\n        \"foodItems\": deepCopyWithLodashCloneDeep.foodItems,\n        \"goalCals\": currDate.goalCals\n      });\n      console.log(updatedDay);\n\n      var deepCopyWithLodashCloneDeep2 = _.cloneDeep(currUser.CalCount.allDays);\n\n      deepCopyWithLodashCloneDeep2.push(updatedDay);\n      var updatedCals = new Cals({\n        \"currTargetCals\": currUser.CalCount.currTargetCals,\n        \"allDays\": deepCopyWithLodashCloneDeep2\n      });\n      setCurrDate(updatedDay);\n    } else {\n      console.warn(\"Item not found\");\n    }\n  }\n\n  if (loaded == false) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {})\n    });\n  }\n\n  console.log(\"---------\");\n  console.log(currUser);\n  console.log(currDate);\n  console.log(allFood);\n  console.log(currFood);\n  console.log(\"---------\");\n  var now = new Date();\n  var next = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  return _jsxs(_Fragment, {\n    children: [_jsxs(View, {\n      style: styles.topnav,\n      children: [_jsxs(Pressable, {\n        style: styles.topnavLeftArrow,\n        onPress: prevDay,\n        children: [\" \", _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Previous Day\"\n        })]\n      }), _jsx(Text, {\n        style: styles.navText,\n        children: moment(next).format('ddd MMM D')\n      }), _jsxs(Pressable, {\n        style: styles.topnavRightArrow,\n        onPress: NextDay,\n        children: [\" \", _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Next Day\"\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        children: [_jsxs(Text, {\n          style: styles.timings,\n          children: [\"You have eaten \", currDate.currCals, \" \"]\n        }), _jsx(Text, {\n          style: styles.timings,\n          children: \"calories today \"\n        }), _jsxs(Text, {\n          style: styles.timings,\n          children: [currDate.goalCals - currDate.currCals, \" more to go!\"]\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        children: [_jsx(TextInput, {\n          style: styles.input,\n          onChangeText: function onChangeText(t) {\n            return setUserInput(t);\n          },\n          value: userInput || \"\",\n          placeholder: \"Item Name\"\n        }), _jsx(TextInput, {\n          style: styles.input,\n          onChangeText: function onChangeText(t) {\n            return setUserInputQua(t);\n          },\n          value: userInputQua || \"\",\n          placeholder: \"Item Quantity\"\n        }), _jsx(Pressable, {\n          style: styles.button,\n          onPress: addItem,\n          children: _jsx(Text, {\n            style: styles.buttonText,\n            children: \"Add Item To Today\"\n          })\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.timings,\n          children: \"All Items Eaten Today\"\n        }), currFood.map(function (x, idx) {\n          return _jsxs(Text, {\n            style: styles.description,\n            children: [x.weight, \" \", x.name, \" for a total of \", x.calCount, \" cals\"]\n          }, idx);\n        }), _jsxs(Pressable, {\n          style: styles.button,\n          onPress: GoToView,\n          children: [\" \", _jsx(Text, {\n            style: styles.buttonText,\n            children: \"View all Items\"\n          })]\n        })]\n      })\n    }), _jsx(View, {\n      style: styles.botnav,\n      children: _jsxs(Pressable, {\n        style: styles.HomeButton,\n        onPress: GoToHome,\n        children: [\" \", _jsx(Text, {\n          style: styles.buttonText,\n          children: \"Home\"\n        })]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  botnav: {\n    backgroundColor: '#031b36',\n    justifyContent: \"flex-end\",\n    paddingVertical: 20,\n    width: '100%',\n    maxWidth: '100%',\n    alignItems: \"center\",\n    flex: 1\n  },\n  HomeButton: {\n    backgroundColor: '#22d3ee',\n    alignSelf: 'auto',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 2,\n    width: '45%'\n  },\n  topnav: {\n    backgroundColor: '#031b36',\n    paddingVertical: 20,\n    width: '100%',\n    maxWidth: '100%',\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  topnavLeftArrow: {\n    backgroundColor: '#22d3ee',\n    alignSelf: 'auto',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 2,\n    width: '30%'\n  },\n  topnavRightArrow: {\n    backgroundColor: '#22d3ee',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 2,\n    width: '30%'\n  },\n  navText: {\n    fontWeight: 'bold',\n    color: 'white',\n    textTransform: 'uppercase',\n    fontSize: 20,\n    alignSelf: \"center\"\n  },\n  container: {\n    marginTop: 10,\n    backgroundColor: '#1f9c4d',\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    borderRadius: 5,\n    alignSelf: 'center',\n    width: '90%',\n    maxWidth: '100%'\n  },\n  timings: {\n    color: '#fff',\n    fontSize: '25px',\n    alignSelf: 'center'\n  },\n  description: {\n    color: 'white',\n    marginBottom: 5,\n    fontSize: 20,\n    alignSelf: 'center'\n  },\n  button: {\n    backgroundColor: '#22d3ee',\n    alignSelf: 'center',\n    paddingHorizontal: 12,\n    paddingVertical: 4,\n    borderRadius: 2\n  },\n  buttonText: {\n    fontWeight: 'bold',\n    color: 'white',\n    textTransform: 'uppercase',\n    fontSize: 14\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\nexport default CalorieScreen;","map":{"version":3,"sources":["C:/Users/spart/Desktop/Capstone/NewApp/React App/fitnessapp/src/screens/CalorieScreen/CalorieScreen.js"],"names":["React","useState","useEffect","Auth","moment","months","DataStore","Day","Exercises","User","Week","ExercisesStorage","CalDays","Cals","DailyFoodItems","_","useNavigation","useIsFocused","FoodItems","getTodaysDate","next","Date","getWeekBegin","now","getFullYear","getMonth","getDate","getDay","CalorieScreen","navigation","loaded","setLoaded","undefined","currUser","setUser","userInput","setUserInput","userInputQua","setUserInputQua","currDate","setCurrDate","currFood","setCurrFood","allFood","setAllFood","GoToHome","navigate","GoToView","IsFocused","loadData","prevDay","NextDay","username","Credentials","user","query","u","allfood","today","newday","CalCount","allDays","forEach","x","slice","toString","console","log","newDayToAdd","currTargetCals","deepCopyWithLodashCloneDeep","cloneDeep","push","newCals","save","copyOf","updated","height","weight","gender","numberOfPreferedExercises","TrainingDayList","addItem","isitemfound","itemfound","name","foodnamecap","charAt","toUpperCase","totalcal","parseInt","calperpound","newFoodtoAdd","foodItems","newCalCount","currCals","updatedDay","goalCals","deepCopyWithLodashCloneDeep2","updatedCals","warn","flex","justifyContent","alignItems","styles","topnav","topnavLeftArrow","buttonText","navText","format","topnavRightArrow","container","timings","input","t","button","map","idx","description","calCount","botnav","HomeButton","StyleSheet","create","backgroundColor","paddingVertical","width","maxWidth","alignSelf","paddingHorizontal","borderRadius","flexDirection","fontWeight","color","textTransform","fontSize","marginTop","marginBottom","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport {View, Text, TouchableOpacity, Alert, ActivityIndicator,StyleSheet,Pressable, TextInput} from 'react-native'\r\nimport {Auth} from \"aws-amplify\"\r\n\r\nimport moment, { months } from \"moment\";\r\nimport { DataStore } from '@aws-amplify/datastore';\r\nimport { Day, Exercises, User, Week, ExercisesStorage, CalDays, Cals, DailyFoodItems } from '../../models';\r\nimport _ from \"lodash\"\r\n\r\nimport { useNavigation, useIsFocused} from \"@react-navigation/native\";\r\nimport { FoodItems } from \"../../models\";\r\n\r\n\r\nfunction getTodaysDate() {\r\n  var next = new Date();\r\n  return next;\r\n}\r\n\r\nfunction getWeekBegin() {\r\n  var now = new Date();\r\n  var next = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());\r\n  return next;\r\n}\r\n\r\n\r\nconst CalorieScreen = () => {\r\n    const navigation = useNavigation();\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [currUser, setUser]= useState(undefined)\r\n    const [userInput, setUserInput]= useState(null)\r\n    const [userInputQua, setUserInputQua]= useState(null)\r\n    const [currDate, setCurrDate]= useState(null)\r\n    const [currFood, setCurrFood]= useState([])\r\n    const [allFood, setAllFood]= useState(null)\r\n\r\n  const GoToHome =  ()=> {\r\n    \r\n    navigation.navigate('Home');\r\n}\r\n    \r\nconst GoToView =  ()=> {\r\n    \r\n  navigation.navigate('ViewScreen');\r\n}\r\n  const IsFocused = useIsFocused()\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    } , [IsFocused])\r\n    \r\n    function prevDay() {\r\n\r\n    }\r\n  \r\n  \r\n    function NextDay() {\r\n\r\n  \r\n    }\r\n\r\n    async function loadData() {\r\n      try {\r\n\r\n          const username = Auth.Credentials.Auth.user.username;\r\n          let user = await DataStore.query(User,  u => u.username(\"eq\", username))\r\n          setUser(user[0])\r\n          \r\n          let allfood = await DataStore.query(FoodItems)\r\n          setAllFood(allfood)\r\n\r\n          const today = new Date()\r\n          let newday = true\r\n          \r\n          \r\n          user[0].CalCount.allDays.forEach ((x)=> {\r\n            if (x.Date.slice(0,16) === today.toString().slice(0,16)) {\r\n              setCurrDate(x)\r\n              newday = false\r\n            }\r\n          })\r\n\r\n          if (newday == true) {\r\n            console.log(\"made new day\")\r\n\r\n              const newDayToAdd = new CalDays({\r\n              \"Date\": today.toString(),\r\n              \"currCals\": \"0\",\r\n              \"foodItems\": [],\r\n              \"goalCals\": user[0].CalCount.currTargetCals\r\n            })\r\n\r\n            \r\n            const deepCopyWithLodashCloneDeep = _.cloneDeep(user[0].CalCount.allDays)\r\n\r\n            deepCopyWithLodashCloneDeep.push(newDayToAdd)\r\n\r\n            const newCals = new Cals({\r\n              \"currTargetCals\": user[0].CalCount.currTargetCals,\r\n              \"allDays\": deepCopyWithLodashCloneDeep,\r\n            })\r\n            \r\n\r\n            await DataStore.save(\r\n              User.copyOf(user[0], updated => {\r\n              updated.height = user[0].height\r\n              updated.weight = user[0].weight\r\n              updated.gender = user[0].gender\r\n              updated.numberOfPreferedExercises =  user[0].numberOfPreferedExercises\r\n              updated.CalCount = newCals;\r\n              updated.TrainingDayList = [user[0].TrainingDayList[0],user[0].TrainingDayList[0]];\r\n              updated.username = user[0].username\r\n              })\r\n          );\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n          //divider\r\n          \r\n          \r\n          user[0].CalCount.allDays.forEach ((x)=> {\r\n            if (x.Date.slice(0,16) === today.toString().slice(0,16)) {\r\n              setCurrDate(x)\r\n            }\r\n          })\r\n          \r\n      } catch (err) {console.log(err)}\r\n\r\n        setLoaded(true)\r\n\r\n     };\r\n\r\n\r\n     function addItem() {\r\n      let isitemfound = false;\r\n      let itemfound \r\n      allFood.forEach((x) => {\r\n\r\n\r\n        if (x.name == userInput) {\r\n          isitemfound = true\r\n          itemfound = x\r\n\r\n        }\r\n      })\r\n\r\n      if (isitemfound == true) {\r\n\r\n        const foodnamecap = itemfound.name.charAt(0).toUpperCase() + itemfound.name.slice(1);\r\n        const totalcal = parseInt(itemfound.calperpound, 10) * parseInt(userInputQua, 10)\r\n\r\n        const newFoodtoAdd = new DailyFoodItems({\r\n          \"name\": foodnamecap,\r\n          \"weight\": userInputQua,\r\n          \"calCount\": totalcal.toString()\r\n        })\r\n\r\n        const deepCopyWithLodashCloneDeep = _.cloneDeep(currDate)\r\n    \r\n        deepCopyWithLodashCloneDeep.foodItems.push(newFoodtoAdd)\r\n        console.log(\"Food\")\r\n        console.log(deepCopyWithLodashCloneDeep.foodItems)\r\n        let newCalCount = parseInt(currDate.currCals, 10) + totalcal\r\n        setCurrFood(deepCopyWithLodashCloneDeep.foodItems)\r\n        const updatedDay = new CalDays({\r\n          \"Date\": currDate.Date,\r\n          \"currCals\": newCalCount.toString(),\r\n          \"foodItems\": deepCopyWithLodashCloneDeep.foodItems,\r\n          \"goalCals\": currDate.goalCals\r\n        })\r\n        console.log(updatedDay)\r\n\r\n\r\n        const deepCopyWithLodashCloneDeep2 = _.cloneDeep(currUser.CalCount.allDays)\r\n\r\n        deepCopyWithLodashCloneDeep2.push(updatedDay)\r\n\r\n        const updatedCals = new Cals({\r\n          \"currTargetCals\": currUser.CalCount.currTargetCals,\r\n          \"allDays\": deepCopyWithLodashCloneDeep2,\r\n\r\n        })\r\n\r\n        /* Models in DataStore are immutable. To update a record you must use the copyOf function\r\n        to apply updates to the item’s fields rather than mutating the instance directly */\r\n        /*\r\n        DataStore.save(User.copyOf(currUser, item => {\r\n          item.CalCount=updatedCals\r\n          item.TrainingDayList=currUser.TrainingDayList\r\n        }));\r\n        */\r\n        setCurrDate(updatedDay)\r\n\r\n      } else {\r\n        console.warn(\"Item not found\")\r\n      }\r\n     }\r\n      if (loaded == false) {\r\n        \r\n          return(\r\n          <View style={{flex:1, justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator></ActivityIndicator>\r\n          </View>)\r\n      }\r\n      console.log(\"---------\")\r\n      console.log(currUser)\r\n      console.log(currDate)\r\n      console.log(allFood)\r\n      console.log(currFood)\r\n      console.log(\"---------\")\r\n      var now = new Date();\r\n      var next = new Date(now.getFullYear(), now.getMonth(), now.getDate())\r\n    return (\r\n        \r\n       <>\r\n\r\n          <View style={styles.topnav}>\r\n          \r\n          <Pressable style={styles.topnavLeftArrow} onPress={prevDay}> <Text style={styles.buttonText}>Previous Day</Text></Pressable>    \r\n          <Text style={styles.navText}>{moment(next).format('ddd MMM D')}</Text> \r\n          <Pressable style={styles.topnavRightArrow} onPress={NextDay}> <Text style={styles.buttonText}>Next Day</Text></Pressable>\r\n          </View>\r\n          <View style={styles.container}>\r\n            <View>\r\n              <Text style={styles.timings}>You have eaten {currDate.currCals} </Text>\r\n              <Text style={styles.timings}>calories today </Text>\r\n              <Text style={styles.timings}>{currDate.goalCals - currDate.currCals} more to go!</Text>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.container}>\r\n            <View>\r\n              <TextInput\r\n                style={styles.input}\r\n                onChangeText={t => setUserInput(t)}\r\n                value={userInput || \"\"}\r\n                placeholder=\"Item Name\"\r\n                />\r\n              <TextInput\r\n                style={styles.input}\r\n                onChangeText={t => setUserInputQua(t)}\r\n                value={userInputQua || \"\"}\r\n                placeholder=\"Item Quantity\"\r\n                />\r\n                  <Pressable style={styles.button} onPress={addItem}>\r\n                    <Text style={styles.buttonText}>Add Item To Today</Text>\r\n                  </Pressable>\r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.container}>\r\n            <View>\r\n              <Text style={styles.timings}>All Items Eaten Today</Text>\r\n              \r\n              {currFood.map((x,idx) => {\r\n                \r\n                return <Text style={styles.description} key={idx}>{x.weight} {x.name} for a total of {x.calCount} cals</Text>\r\n\r\n              })}\r\n\r\n            <Pressable style={styles.button} onPress={GoToView}> <Text style={styles.buttonText}>View all Items</Text></Pressable>    \r\n            </View>\r\n          </View>\r\n\r\n          <View style={styles.botnav}>\r\n            <Pressable style={styles.HomeButton} onPress={GoToHome}> <Text style={styles.buttonText}>Home</Text></Pressable>    \r\n          </View>\r\n       </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  botnav: {\r\n    backgroundColor: '#031b36',\r\n    justifyContent:\"flex-end\",\r\n    paddingVertical: 20,\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    alignItems:\"center\",\r\n    flex:1\r\n  },\r\n  HomeButton: {\r\n\r\n    backgroundColor: '#22d3ee',\r\n    alignSelf: 'auto',\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 4,\r\n    borderRadius: 2,\r\n    width: '45%',\r\n\r\n  },\r\n  topnav: {\r\n    backgroundColor: '#031b36',\r\n    paddingVertical: 20,\r\n\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    flexDirection:\"row\",\r\n    alignItems:\"center\",\r\n    justifyContent:\"space-between\"\r\n  },\r\n  topnavLeftArrow: {\r\n\r\n    backgroundColor: '#22d3ee',\r\n    alignSelf: 'auto',\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 4,\r\n    borderRadius: 2,\r\n    width: '30%',\r\n\r\n  },\r\n  topnavRightArrow: {\r\n\r\n    backgroundColor: '#22d3ee',\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 4,\r\n    borderRadius: 2,\r\n    width: '30%',\r\n\r\n  },\r\n  navText: {\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    textTransform: 'uppercase',\r\n    fontSize: 20,\r\n\r\n    alignSelf:\"center\"\r\n\r\n  },\r\n  container: {\r\n    marginTop: 10,\r\n    backgroundColor: '#1f9c4d',\r\n    paddingVertical: 16,\r\n    paddingHorizontal: 12,\r\n    borderRadius: 5,\r\n    alignSelf: 'center',\r\n    width: '90%',\r\n    maxWidth: '100%',\r\n    \r\n  },\r\n  timings: {\r\n    color: '#fff',\r\n    fontSize: '25px',\r\n    alignSelf: 'center'\r\n  },\r\n  description: {\r\n    color: 'white',\r\n    marginBottom: 5,\r\n    fontSize: 20,\r\n    alignSelf: 'center'\r\n  },\r\n  button: {\r\n    backgroundColor: '#22d3ee',\r\n    alignSelf: 'center',\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 4,\r\n    borderRadius: 2,\r\n  },\r\n  buttonText: {\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    textTransform: 'uppercase',\r\n    fontSize: 14\r\n  },\r\n  input: {\r\n    height: 40,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10,\r\n\r\n  },\r\n});\r\nexport default CalorieScreen;"]},"metadata":{},"sourceType":"module"}